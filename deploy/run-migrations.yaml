# Cloud Build configuration for running database migrations
# Uses the existing backend Docker image to run migrations from Google Cloud environment

steps:
  # Build the backend image (same as deployment)
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/kotori-io/kotori-images/kotori-api:migration-${SHORT_SHA}'
      - '.'
    dir: 'backend'

  # Create database backup before migration
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "üîÑ Creating database backup before migration..."
        BACKUP_DESCRIPTION="pre-migration-$$(date +%Y%m%d-%H%M%S)"
        if gcloud sql backups create \
          --instance=kotori-db \
          --description="$$BACKUP_DESCRIPTION" \
          --project=kotori-io; then
          echo "‚úÖ Backup created: $$BACKUP_DESCRIPTION"
        else
          echo "‚ö†Ô∏è  Backup creation failed; continuing with migration as per policy"
        fi

  # Run database migrations using the backend container
  - name: 'us-central1-docker.pkg.dev/kotori-io/kotori-images/kotori-api:migration-${SHORT_SHA}'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "üîç Starting migration process..."
        cd /app
        # Ensure we use the installed user-level tools from the image
        export HOME=/home/kotori
        export PYTHONPATH=/home/kotori/.local/lib/python3.11/site-packages:/app
        if [[ ! -x "/home/kotori/.local/bin/alembic" ]]; then
          echo "‚ùå Alembic not found at /home/kotori/.local/bin/alembic"; ls -la /home/kotori/.local/bin || true; which alembic || true; exit 1;
        fi
        echo "Alembic version:"
        /home/kotori/.local/bin/alembic --version || true
        
        # Check current migration status
        echo "üìä Current migration status:"
        /home/kotori/.local/bin/alembic current || true
        
        # Show target revision
        echo "üéØ Target revision:"
        /home/kotori/.local/bin/alembic heads
        
        # Preview migrations (limited output to avoid issues)
        echo "üëÄ Migration preview (first 10 operations):"
        /home/kotori/.local/bin/alembic upgrade head --sql | grep -E "(CREATE|ALTER|DROP|INSERT|UPDATE)" | head -10 || true
        
        # Execute migrations (fail hard on error)
        echo "üöÄ Executing database migrations..."
        /home/kotori/.local/bin/alembic upgrade head
        
        # Verify success
        echo "‚úÖ Post-migration status:"
        /home/kotori/.local/bin/alembic current
        
        echo "üéâ Database migrations completed successfully!"
    secretEnv:
      - 'DATABASE_URL'
      - 'SECRET_KEY'
      - 'GOOGLE_CLOUD_PROJECT'
      - 'GOOGLE_CLOUD_LOCATION'
      - 'ENCRYPTION_MASTER_SALT'

availableSecrets:
  secretManager:
    - versionName: projects/kotori-io/secrets/database-url/versions/latest
      env: DATABASE_URL
    - versionName: projects/kotori-io/secrets/secret-key/versions/latest
      env: SECRET_KEY
    - versionName: projects/kotori-io/secrets/google-cloud-project/versions/latest
      env: GOOGLE_CLOUD_PROJECT
    - versionName: projects/kotori-io/secrets/google-cloud-location/versions/latest
      env: GOOGLE_CLOUD_LOCATION
    - versionName: projects/kotori-io/secrets/encryption-master-salt/versions/latest
      env: ENCRYPTION_MASTER_SALT

# Build configuration
timeout: '1200s'
options:
  logging: CLOUD_LOGGING_ONLY
  pool:
    name: projects/kotori-io/locations/us-central1/workerPools/private-pool
