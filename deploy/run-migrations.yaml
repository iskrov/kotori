# Cloud Build configuration for running database migrations
# Uses the existing backend Docker image to run migrations from Google Cloud environment

steps:
  # Build the backend image (same as deployment)
  - name: 'gcr.io/cloud-builders/docker'
    args: 
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/kotori-io/kotori-images/kotori-api:migration-${SHORT_SHA}'
      - '.'
    dir: 'backend'

  # Create database backup before migration
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîÑ Creating database backup before migration..."
        BACKUP_DESCRIPTION="pre-migration-$(date +%Y%m%d-%H%M%S)"
        gcloud sql backups create \
          --instance=kotori-db-instance \
          --description="$BACKUP_DESCRIPTION" \
          --project=kotori-io
        echo "‚úÖ Backup created: $BACKUP_DESCRIPTION"

  # Run database migrations using the backend container
  - name: 'us-central1-docker.pkg.dev/kotori-io/kotori-images/kotori-api:migration-${SHORT_SHA}'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîç Starting migration process..."
        cd /app
        
        # Check current migration status
        echo "üìä Current migration status:"
        alembic current || echo "No current revision found"
        
        # Show target revision
        echo "üéØ Target revision:"
        alembic heads
        
        # Preview migrations (limited output to avoid issues)
        echo "üëÄ Migration preview (first 10 operations):"
        timeout 30s alembic upgrade head --sql | grep -E "(CREATE|ALTER|DROP|INSERT|UPDATE)" | head -10 || echo "Preview completed or timed out"
        
        # Execute migrations
        echo "üöÄ Executing database migrations..."
        alembic upgrade head
        
        # Verify success
        echo "‚úÖ Post-migration status:"
        alembic current
        
        echo "üéâ Database migrations completed successfully!"
    env:
      # Environment variables will be set from secrets
      - 'DATABASE_URL=${_DATABASE_URL}'
      - 'SECRET_KEY=${_SECRET_KEY}'
      - 'GOOGLE_CLOUD_PROJECT=${_GOOGLE_CLOUD_PROJECT}'
      - 'GOOGLE_CLOUD_LOCATION=${_GOOGLE_CLOUD_LOCATION}'
      - 'ENCRYPTION_MASTER_SALT=${_ENCRYPTION_MASTER_SALT}'

# Substitutions for secrets (will be provided by deployment script)
substitutions:
  _DATABASE_URL: ''
  _SECRET_KEY: ''
  _GOOGLE_CLOUD_PROJECT: ''
  _GOOGLE_CLOUD_LOCATION: ''
  _ENCRYPTION_MASTER_SALT: ''

# Build configuration
timeout: '1200s'
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'
