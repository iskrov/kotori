name: Code Quality Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run ESLint
      run: |
        cd frontend
        npx eslint src/ --ext .ts,.tsx,.js,.jsx --format json --output-file ../reports/eslint-results.json || true
        npx eslint src/ --ext .ts,.tsx,.js,.jsx || true
        
    - name: Run TypeScript compilation check
      run: |
        cd frontend
        npx tsc --noEmit
        
    - name: Check for dead code
      run: |
        cd frontend
        npx ts-unused-exports tsconfig.json > ../reports/dead-code-report.txt || true
        
    - name: Check for unused imports
      run: |
        cd frontend
        npx unimported > ../reports/unused-imports-report.txt || true
        
    - name: Run tests with coverage
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --passWithNoTests
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend
        
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: frontend-quality-reports
        path: |
          reports/
          frontend/coverage/
          
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install ruff pytest pytest-cov
        
    - name: Run Ruff linting
      run: |
        cd backend
        ruff check . --output-format json > ../reports/ruff-results.json || true
        ruff check . || true
        
    - name: Run Ruff formatting check
      run: |
        cd backend
        ruff format --check . || true
        
    - name: Run Python tests with coverage
      run: |
        cd backend
        pytest --cov=app --cov-report=json --cov-report=html --cov-report=term
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend
        flags: backend
        
    - name: Upload backend quality reports
      uses: actions/upload-artifact@v4
      with:
        name: backend-quality-reports
        path: |
          reports/
          backend/htmlcov/
          backend/coverage.json
          
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Download quality reports
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Copy reports to workspace
      run: |
        cp -r artifacts/frontend-quality-reports/* reports/ 2>/dev/null || true
        cp -r artifacts/backend-quality-reports/* reports/ 2>/dev/null || true
        
    - name: Run quality dashboard
      run: |
        cd frontend
        npx ts-node ../tools/quality/quality_dashboard.ts || true
        
    - name: Check quality gates
      run: |
        echo "Checking quality gates..."
        
        # ESLint errors check
        if [ -f "reports/eslint-results.json" ]; then
          ESLINT_ERRORS=$(jq '[.[] | .messages[] | select(.severity == 2)] | length' reports/eslint-results.json)
          echo "ESLint errors: $ESLINT_ERRORS"
          if [ "$ESLINT_ERRORS" -gt 0 ]; then
            echo "❌ Quality gate failed: ESLint errors found"
            exit 1
          fi
        fi
        
        # Test coverage check
        if [ -f "frontend/coverage/coverage-summary.json" ]; then
          COVERAGE=$(jq '.total.lines.pct' frontend/coverage/coverage-summary.json)
          echo "Test coverage: $COVERAGE%"
          if [ "$(echo "$COVERAGE < 80" | bc -l 2>/dev/null || echo 1)" -eq 1 ]; then
            echo "❌ Quality gate failed: Test coverage below 80%"
            exit 1
          fi
        fi
        
        echo "✅ All quality gates passed!"
        
    - name: Generate quality badge
      run: |
        # Create a simple quality badge
        mkdir -p badges
        echo "Quality: ✅ Passing" > badges/quality.txt
        
    - name: Upload quality dashboard
      uses: actions/upload-artifact@v4
      with:
        name: quality-dashboard
        path: |
          reports/quality_dashboard.html
          reports/quality_*.json
          badges/
          
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit (frontend)
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > ../reports/npm-audit.json || true
        npm audit --audit-level=moderate || true
        
    - name: Run Python security scan
      run: |
        cd backend
        pip install safety
        safety check --json > ../reports/safety-results.json || true
        safety check || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: reports/
        
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Analyze bundle size
      run: |
        cd frontend
        npm run build || echo "Build not configured"
        # Add bundle analyzer if configured
        
    - name: Run performance tests
      run: |
        cd frontend
        npm run test:performance || echo "Performance tests not configured"
        
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality, quality-gates, security-scan, performance-analysis]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Generate summary
      run: |
        echo "# Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Results" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.frontend-quality.result }}" == "success" ]; then
          echo "✅ Frontend Quality: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Frontend Quality: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.backend-quality.result }}" == "success" ]; then
          echo "✅ Backend Quality: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend Quality: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.quality-gates.result }}" == "success" ]; then
          echo "✅ Quality Gates: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Quality Gates: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Scan: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Quality Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- ESLint errors: Check detailed reports" >> $GITHUB_STEP_SUMMARY
        echo "- Test coverage: Check coverage reports" >> $GITHUB_STEP_SUMMARY
        echo "- Security issues: Check security scan results" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Reports" >> $GITHUB_STEP_SUMMARY
        echo "All quality reports are available in the artifacts section." >> $GITHUB_STEP_SUMMARY 