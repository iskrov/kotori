name: Secret Tags Test Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/test-secret-tags.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/test-secret-tags.yml'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist pytest-mock
    
    - name: Run CI/CD optimized tests
      working-directory: ./backend
      run: |
        pytest -m ci --cov=app --cov-report=xml --cov-report=term-missing -v
    
    - name: Run Secret Tags unit tests
      working-directory: ./backend
      run: |
        pytest tests/test_secret_tags.py -v --cov=app.models.secret_tag --cov=app.services --cov-append
    
    - name: Run Secret Tags integration tests
      working-directory: ./backend
      run: |
        pytest tests/test_secret_tags_integration.py -v --cov-append
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run Secret Tags service tests
      working-directory: ./frontend
      run: |
        npm test -- --testPathPattern="secretTagManager|speechToText|encryptedJournalService" --coverage --watchAll=false
    
    - name: Run all frontend tests
      working-directory: ./frontend
      run: |
        npm test -- --coverage --watchAll=false --coverageReporters=lcov
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  security-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Run Zero-Knowledge Compliance Tests
      working-directory: ./backend
      run: |
        pytest -m zero_knowledge -v --tb=short
    
    - name: Run Security and Data Isolation Tests
      working-directory: ./backend
      run: |
        pytest tests/test_secret_tags_integration.py::TestSecretTagsIntegration::test_multi_user_secret_tag_isolation -v
        pytest tests/test_secret_tags_integration.py::TestSecretTagsIntegration::test_zero_knowledge_compliance_integration -v

  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run Performance Tests
      working-directory: ./backend
      run: |
        pytest -m performance -v --durations=10
        pytest tests/test_secret_tags_integration.py::TestSecretTagsIntegration::test_performance_with_multiple_secret_tags -v

  compatibility-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Run Backward Compatibility Tests
      working-directory: ./backend
      run: |
        pytest tests/test_secret_tags_integration.py::TestSecretTagsBackwardCompatibility -v
    
    - name: Run Migration Compatibility Tests
      working-directory: ./backend
      run: |
        pytest tests/test_secret_tags_ci.py::TestSecretTagsCICD::test_migration_compatibility -v

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run Full Integration Tests
      working-directory: ./backend
      run: |
        pytest -m integration -v --tb=short
    
    - name: Generate Combined Coverage Report
      working-directory: ./backend
      run: |
        pytest --cov=app --cov-report=html --cov-report=xml
    
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: |
          backend/htmlcov/
          backend/coverage.xml

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-tests, performance-tests, compatibility-tests]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "## Secret Tags Test Suite Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Category | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Compatibility Tests | ${{ needs.compatibility-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.backend-tests.result }}" == "success" && "${{ needs.frontend-tests.result }}" == "success" && "${{ needs.security-tests.result }}" == "success" ]]; then
          echo "✅ All critical tests passed! Secret tags system is ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Please review the results before proceeding." >> $GITHUB_STEP_SUMMARY
        fi 