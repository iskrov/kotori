# Cloud Build configuration for Kotori
# This file defines the CI/CD pipeline for automatic deployment

steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/kotori-images/kotori-api:${SHORT_SHA}',
      '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/kotori-images/kotori-api:latest',
      './backend'
    ]
    id: 'build-image'

  # Step 2: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push',
      '${_REGION}-docker.pkg.dev/${PROJECT_ID}/kotori-images/kotori-api:${SHORT_SHA}'
    ]
    id: 'push-image-sha'
    waitFor: ['build-image']

  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push',
      '${_REGION}-docker.pkg.dev/${PROJECT_ID}/kotori-images/kotori-api:latest'
    ]
    id: 'push-image-latest'
    waitFor: ['build-image']

  # Step 3: Run database migrations (if needed)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Check if migration job exists, create if not
        if ! gcloud run jobs describe kotori-migrate --region=${_REGION} --quiet; then
          gcloud run jobs create kotori-migrate \
            --image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/kotori-images/kotori-api:${SHORT_SHA} \
            --region=${_REGION} \
            --service-account=kotori-api@${PROJECT_ID}.iam.gserviceaccount.com \
            --set-secrets="DATABASE_URL=database-url:latest,SECRET_KEY=secret-key:latest,ENCRYPTION_MASTER_SALT=encryption-master-salt:latest,GOOGLE_CLOUD_PROJECT=google-cloud-project:latest,GOOGLE_CLOUD_LOCATION=google-cloud-location:latest" \
            --set-env-vars="ENVIRONMENT=production" \
            --task-timeout=600 \
            --command="alembic" \
            --args="upgrade,head"
        else
          # Update existing job with new image
          gcloud run jobs replace-job kotori-migrate \
            --image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/kotori-images/kotori-api:${SHORT_SHA} \
            --region=${_REGION}
        fi
        
        # Execute migration
        gcloud run jobs execute kotori-migrate --region=${_REGION} --wait
    id: 'run-migrations'
    waitFor: ['push-image-sha']

  # Step 4: Deploy to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'kotori-api',
      '--image', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/kotori-images/kotori-api:${SHORT_SHA}',
      '--platform', 'managed',
      '--region', '${_REGION}',
      '--service-account', 'kotori-api@${PROJECT_ID}.iam.gserviceaccount.com',
      '--set-env-vars', 'ENVIRONMENT=production,DEBUG=false,ENABLE_SECRET_TAGS=false,PORT=8001,CORS_ORIGINS=https://kotori.io,https://www.kotori.io',
      '--set-secrets', 'DATABASE_URL=database-url:latest,SECRET_KEY=secret-key:latest,ENCRYPTION_MASTER_SALT=encryption-master-salt:latest,GOOGLE_CLOUD_PROJECT=google-cloud-project:latest,GOOGLE_CLOUD_LOCATION=google-cloud-location:latest',
      '--allow-unauthenticated',
      '--min-instances', '1',
      '--max-instances', '10',
      '--memory', '1Gi',
      '--cpu', '1',
      '--concurrency', '100',
      '--timeout', '300',
      '--port', '8001'
    ]
    id: 'deploy-cloud-run'
    waitFor: ['run-migrations']

  # Step 5: Run health check
  - name: 'gcr.io/cloud-builders/curl'
    args: [
      '-f',
      '-s',
      'https://kotori-api-${_CLOUD_RUN_SUFFIX}.run.app/api/health'
    ]
    id: 'health-check'
    waitFor: ['deploy-cloud-run']

# Build configuration
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Substitution variables
substitutions:
  _REGION: 'northamerica-northeast2'
  _CLOUD_RUN_SUFFIX: 'your-cloud-run-suffix'  # Update this after first deployment

# Build timeout
timeout: '1200s'

# Images to be pushed to registry
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/kotori-images/kotori-api:${SHORT_SHA}'
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/kotori-images/kotori-api:latest'
