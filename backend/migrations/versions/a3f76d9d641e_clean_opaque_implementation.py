"""clean_opaque_implementation

Revision ID: a3f76d9d641e
Revises: 
Create Date: 2025-06-26 12:16:06.823887

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a3f76d9d641e'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First, drop journal_entries foreign key constraint and legacy columns
    op.drop_index('ix_journal_entries_secret_tag_hash', table_name='journal_entries')
    op.drop_constraint('journal_entries_secret_tag_id_fkey', 'journal_entries', type_='foreignkey')
    op.drop_column('journal_entries', 'encrypted_key')
    op.drop_column('journal_entries', 'encryption_algorithm')
    op.drop_column('journal_entries', 'encryption_salt')
    op.drop_column('journal_entries', 'key_derivation_iterations')
    op.drop_column('journal_entries', 'encryption_wrap_iv')
    op.drop_column('journal_entries', 'secret_tag_hash')
    
    # Update journal_entries.secret_tag_id to match new secret_tags.tag_id type
    # Since table is empty, we can drop and recreate the column
    op.drop_column('journal_entries', 'secret_tag_id')
    op.add_column('journal_entries', sa.Column('secret_tag_id', sa.LargeBinary(length=16), nullable=True))
    
    # Update secret_tags table structure
    op.add_column('secret_tags', sa.Column('tag_id', sa.LargeBinary(length=16), nullable=False))
    op.add_column('secret_tags', sa.Column('salt', sa.LargeBinary(length=16), nullable=False))
    op.add_column('secret_tags', sa.Column('verifier_kv', sa.LargeBinary(length=32), nullable=False))
    op.add_column('secret_tags', sa.Column('opaque_envelope', sa.LargeBinary(), nullable=False))
    op.drop_index('ix_secret_tags_id', table_name='secret_tags')
    op.create_index('idx_secret_tags_tag_lookup', 'secret_tags', ['tag_id'], unique=False)
    op.create_index('idx_secret_tags_user_id', 'secret_tags', ['user_id'], unique=False)
    op.drop_column('secret_tags', 'phrase_salt')
    op.drop_column('secret_tags', 'phrase_hash')
    op.drop_column('secret_tags', 'id')
    
    # Add primary key constraint on tag_id
    op.create_primary_key('pk_secret_tags_tag_id', 'secret_tags', ['tag_id'])
    
    # Create new foreign key constraint from journal_entries to secret_tags.tag_id
    op.create_foreign_key(None, 'journal_entries', 'secret_tags', ['secret_tag_id'], ['tag_id'])
    
    # Now create tables that reference secret_tags.tag_id
    op.create_table('opaque_sessions',
    sa.Column('session_id', sa.String(length=64), nullable=False),
    sa.Column('user_id', sa.String(length=36), nullable=False),
    sa.Column('tag_id', sa.LargeBinary(length=16), nullable=True),
    sa.Column('session_state', sa.String(length=20), nullable=False),
    sa.Column('session_data', sa.LargeBinary(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('last_activity', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('session_id')
    )
    op.create_index('idx_opaque_sessions_expires_at', 'opaque_sessions', ['expires_at'], unique=False)
    op.create_index('idx_opaque_sessions_user_id', 'opaque_sessions', ['user_id'], unique=False)
    op.create_index(op.f('ix_opaque_sessions_tag_id'), 'opaque_sessions', ['tag_id'], unique=False)
    op.create_index(op.f('ix_opaque_sessions_user_id'), 'opaque_sessions', ['user_id'], unique=False)
    
    op.create_table('wrapped_keys',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('tag_id', sa.LargeBinary(length=16), nullable=False),
    sa.Column('vault_id', sa.String(length=36), nullable=False),
    sa.Column('wrapped_key', sa.LargeBinary(length=40), nullable=False),
    sa.Column('key_purpose', sa.String(length=50), nullable=False),
    sa.Column('key_version', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['secret_tags.tag_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_wrapped_keys_tag_id', 'wrapped_keys', ['tag_id'], unique=False)
    op.create_index('idx_wrapped_keys_vault_id', 'wrapped_keys', ['vault_id'], unique=False)
    op.create_index(op.f('ix_wrapped_keys_tag_id'), 'wrapped_keys', ['tag_id'], unique=False)
    op.create_index(op.f('ix_wrapped_keys_vault_id'), 'wrapped_keys', ['vault_id'], unique=False)
    
    op.create_table('vault_blobs',
    sa.Column('vault_id', sa.String(length=36), nullable=False),
    sa.Column('object_id', sa.String(length=36), nullable=False),
    sa.Column('wrapped_key_id', sa.String(length=36), nullable=False),
    sa.Column('iv', sa.LargeBinary(length=12), nullable=False),
    sa.Column('ciphertext', sa.LargeBinary(), nullable=False),
    sa.Column('auth_tag', sa.LargeBinary(length=16), nullable=False),
    sa.Column('content_type', sa.String(length=100), nullable=False),
    sa.Column('content_size', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['wrapped_key_id'], ['wrapped_keys.id'], ),
    sa.PrimaryKeyConstraint('vault_id', 'object_id')
    )
    op.create_index('idx_vault_blobs_vault_id', 'vault_blobs', ['vault_id'], unique=False)
    op.create_index('idx_vault_blobs_wrapped_key', 'vault_blobs', ['wrapped_key_id'], unique=False)
    op.create_index(op.f('ix_vault_blobs_wrapped_key_id'), 'vault_blobs', ['wrapped_key_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('secret_tags', sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False))
    op.add_column('secret_tags', sa.Column('phrase_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('secret_tags', sa.Column('phrase_salt', postgresql.BYTEA(), autoincrement=False, nullable=False))
    op.drop_index('idx_secret_tags_user_id', table_name='secret_tags')
    op.drop_index('idx_secret_tags_tag_lookup', table_name='secret_tags')
    op.create_index('ix_secret_tags_id', 'secret_tags', ['id'], unique=False)
    op.drop_column('secret_tags', 'opaque_envelope')
    op.drop_column('secret_tags', 'verifier_kv')
    op.drop_column('secret_tags', 'salt')
    op.drop_column('secret_tags', 'tag_id')
    op.add_column('journal_entries', sa.Column('secret_tag_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('journal_entries', sa.Column('encryption_wrap_iv', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('journal_entries', sa.Column('key_derivation_iterations', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('journal_entries', sa.Column('encryption_salt', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('journal_entries', sa.Column('encryption_algorithm', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('journal_entries', sa.Column('encrypted_key', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'journal_entries', type_='foreignkey')
    op.create_foreign_key('journal_entries_secret_tag_id_fkey', 'journal_entries', 'secret_tags', ['secret_tag_id'], ['id'])
    op.create_index('ix_journal_entries_secret_tag_hash', 'journal_entries', ['secret_tag_hash'], unique=False)
    op.drop_index(op.f('ix_vault_blobs_wrapped_key_id'), table_name='vault_blobs')
    op.drop_index('idx_vault_blobs_wrapped_key', table_name='vault_blobs')
    op.drop_index('idx_vault_blobs_vault_id', table_name='vault_blobs')
    op.drop_table('vault_blobs')
    op.drop_index(op.f('ix_wrapped_keys_vault_id'), table_name='wrapped_keys')
    op.drop_index(op.f('ix_wrapped_keys_tag_id'), table_name='wrapped_keys')
    op.drop_index('idx_wrapped_keys_vault_id', table_name='wrapped_keys')
    op.drop_index('idx_wrapped_keys_tag_id', table_name='wrapped_keys')
    op.drop_table('wrapped_keys')
    op.drop_index(op.f('ix_opaque_sessions_user_id'), table_name='opaque_sessions')
    op.drop_index(op.f('ix_opaque_sessions_tag_id'), table_name='opaque_sessions')
    op.drop_index('idx_opaque_sessions_user_id', table_name='opaque_sessions')
    op.drop_index('idx_opaque_sessions_expires_at', table_name='opaque_sessions')
    op.drop_table('opaque_sessions')
    # ### end Alembic commands ###
