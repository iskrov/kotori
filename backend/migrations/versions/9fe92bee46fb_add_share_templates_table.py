"""add_share_templates_table

Revision ID: 9fe92bee46fb
Revises: b2c3d4e5f6a7
Create Date: 2025-08-12 06:28:10.412867

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9fe92bee46fb'
down_revision = 'b2c3d4e5f6a7'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Safe, idempotent drops to handle divergent schemas in production.
    # Use IF EXISTS to avoid failure when indexes/tables are already absent.
    conn = op.get_bind()

    # security_audit_logs indexes and table
    conn.execute(sa.text('DROP INDEX IF EXISTS idx_audit_logs_category_severity'))
    conn.execute(sa.text('DROP INDEX IF EXISTS idx_audit_logs_correlation'))
    conn.execute(sa.text('DROP INDEX IF EXISTS idx_audit_logs_event_type'))
    conn.execute(sa.text('DROP INDEX IF EXISTS idx_audit_logs_timestamp'))
    conn.execute(sa.text('DROP INDEX IF EXISTS idx_audit_logs_user_time'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_audit_logs_correlation_id'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_audit_logs_event_category'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_audit_logs_event_type'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_audit_logs_session_id_hash'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_audit_logs_severity'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_audit_logs_timestamp'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_audit_logs_user_id_hash'))
    conn.execute(sa.text('DROP TABLE IF EXISTS security_audit_logs CASCADE'))

    # security_alerts indexes and table
    conn.execute(sa.text('DROP INDEX IF EXISTS idx_alerts_status_time'))
    conn.execute(sa.text('DROP INDEX IF EXISTS idx_alerts_type_severity'))
    conn.execute(sa.text('DROP INDEX IF EXISTS idx_alerts_user_time'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_alerts_alert_type'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_alerts_correlation_id'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_alerts_first_seen'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_alerts_severity'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_alerts_status'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_alerts_user_id_hash'))
    conn.execute(sa.text('DROP TABLE IF EXISTS security_alerts CASCADE'))

    # security_metrics indexes and table
    conn.execute(sa.text('DROP INDEX IF EXISTS idx_security_metrics_alert'))
    conn.execute(sa.text('DROP INDEX IF EXISTS idx_security_metrics_category'))
    conn.execute(sa.text('DROP INDEX IF EXISTS idx_security_metrics_name_time'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_metrics_category'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_metrics_metric_name'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_metrics_metric_type'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_metrics_subcategory'))
    conn.execute(sa.text('DROP INDEX IF EXISTS ix_security_metrics_timestamp'))
    conn.execute(sa.text('DROP TABLE IF EXISTS security_metrics CASCADE'))


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('security_metrics',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('metric_type', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('time_window', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('metric_value', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('subcategory', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('threshold_value', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('threshold_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('alert_triggered', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('dimensions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('extra_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('security_metrics_pkey'))
    )
    op.create_index(op.f('ix_security_metrics_timestamp'), 'security_metrics', ['timestamp'], unique=False)
    op.create_index(op.f('ix_security_metrics_subcategory'), 'security_metrics', ['subcategory'], unique=False)
    op.create_index(op.f('ix_security_metrics_metric_type'), 'security_metrics', ['metric_type'], unique=False)
    op.create_index(op.f('ix_security_metrics_metric_name'), 'security_metrics', ['metric_name'], unique=False)
    op.create_index(op.f('ix_security_metrics_category'), 'security_metrics', ['category'], unique=False)
    op.create_index(op.f('idx_security_metrics_name_time'), 'security_metrics', ['metric_name', 'timestamp'], unique=False)
    op.create_index(op.f('idx_security_metrics_category'), 'security_metrics', ['category'], unique=False)
    op.create_index(op.f('idx_security_metrics_alert'), 'security_metrics', ['alert_triggered'], unique=False)
    op.create_table('security_alerts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('alert_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('detection_rule', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('user_id_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('correlation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('related_events', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('first_seen', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('last_seen', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('resolved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('response_actions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('manual_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('event_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('confidence_score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('security_alerts_pkey'))
    )
    op.create_index(op.f('ix_security_alerts_user_id_hash'), 'security_alerts', ['user_id_hash'], unique=False)
    op.create_index(op.f('ix_security_alerts_status'), 'security_alerts', ['status'], unique=False)
    op.create_index(op.f('ix_security_alerts_severity'), 'security_alerts', ['severity'], unique=False)
    op.create_index(op.f('ix_security_alerts_first_seen'), 'security_alerts', ['first_seen'], unique=False)
    op.create_index(op.f('ix_security_alerts_correlation_id'), 'security_alerts', ['correlation_id'], unique=False)
    op.create_index(op.f('ix_security_alerts_alert_type'), 'security_alerts', ['alert_type'], unique=False)
    op.create_index(op.f('idx_alerts_user_time'), 'security_alerts', ['user_id_hash', 'first_seen'], unique=False)
    op.create_index(op.f('idx_alerts_type_severity'), 'security_alerts', ['alert_type', 'severity'], unique=False)
    op.create_index(op.f('idx_alerts_status_time'), 'security_alerts', ['status', 'first_seen'], unique=False)
    op.create_table('security_audit_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('event_category', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('user_id_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('session_id_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('correlation_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('request_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('ip_address_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('user_agent_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('event_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('event_message', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('log_signature', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('is_sensitive', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('error_code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('extra_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('security_audit_logs_pkey'))
    )
    op.create_index(op.f('ix_security_audit_logs_user_id_hash'), 'security_audit_logs', ['user_id_hash'], unique=False)
    op.create_index(op.f('ix_security_audit_logs_timestamp'), 'security_audit_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_security_audit_logs_severity'), 'security_audit_logs', ['severity'], unique=False)
    op.create_index(op.f('ix_security_audit_logs_session_id_hash'), 'security_audit_logs', ['session_id_hash'], unique=False)
    op.create_index(op.f('ix_security_audit_logs_event_type'), 'security_audit_logs', ['event_type'], unique=False)
    op.create_index(op.f('ix_security_audit_logs_event_category'), 'security_audit_logs', ['event_category'], unique=False)
    op.create_index(op.f('ix_security_audit_logs_correlation_id'), 'security_audit_logs', ['correlation_id'], unique=False)
    op.create_index(op.f('idx_audit_logs_user_time'), 'security_audit_logs', ['user_id_hash', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_logs_timestamp'), 'security_audit_logs', ['timestamp'], unique=False)
    op.create_index(op.f('idx_audit_logs_event_type'), 'security_audit_logs', ['event_type'], unique=False)
    op.create_index(op.f('idx_audit_logs_correlation'), 'security_audit_logs', ['correlation_id'], unique=False)
    op.create_index(op.f('idx_audit_logs_category_severity'), 'security_audit_logs', ['event_category', 'severity'], unique=False)
    # ### end Alembic commands ###
