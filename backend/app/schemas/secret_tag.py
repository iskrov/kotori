"""
Clean Secret Tag Schemas

Pydantic models for clean OPAQUE secret tag operations using tag_handle
instead of legacy phrase_hash/salt/verifier_kv approach.

Follows the target architecture specifications for zero-knowledge secret tags.
"""

from datetime import datetime
from typing import Optional, Dict, Any, List
from uuid import UUID
from pydantic import BaseModel, Field, field_validator
import base64


# ============================================================================
# Secret Tag Registration (Clean OPAQUE)
# ============================================================================

class SecretTagRegistrationStartRequest(BaseModel):
    """
    Request schema for starting secret tag OPAQUE registration.
    
    Client submits OPAQUE registration request and tag metadata.
    Server generates random tag_handle and processes OPAQUE registration.
    """
    
    # OPAQUE protocol data (base64 encoded)
    opaque_registration_request: str = Field(
        ...,
        description="Base64-encoded OPAQUE registration request from client",
        min_length=1
    )
    
    # Tag metadata
    tag_name: str = Field(
        ...,
        description="Human-readable name for the secret tag",
        min_length=1,
        max_length=100
    )
    
    color: Optional[str] = Field(
        None,
        description="Hex color code for UI display (optional)",
        pattern=r"^#[0-9A-Fa-f]{6}$"
    )
    
    @field_validator('opaque_registration_request')
    @classmethod
    def validate_base64(cls, v):
        """Validate that OPAQUE request is base64 or base64url encoded."""
        for decoder in (base64.b64decode, base64.urlsafe_b64decode):
            try:
                # Add correct amount of padding if missing
                missing_padding = len(v) % 4
                if missing_padding:
                    v_padded = v + '=' * (4 - missing_padding)
                else:
                    v_padded = v
                decoded = decoder(v_padded)
                if len(decoded) > 0:
                    return v  # Return original value, not padded
            except Exception:
                continue
        raise ValueError("Invalid base64/base64url encoding for OPAQUE registration request")
    
    class Config:
        json_schema_extra = {
            "example": {
                "opaque_registration_request": "base64_encoded_opaque_registration_request",
                "tag_name": "My Secret Tag",
                "color": "#007AFF"
            }
        }


class SecretTagRegistrationStartResponse(BaseModel):
    """
    Response schema for secret tag registration start.
    
    Contains server's OPAQUE registration response and session information
    for completing registration.
    """
    
    session_id: str = Field(
        ...,
        description="Session ID for completing registration"
    )
    
    opaque_registration_response: str = Field(
        ...,
        description="Base64-encoded OPAQUE registration response from server"
    )
    
    tag_handle: str = Field(
        ...,
        description="Base64-encoded random tag handle (32 bytes) generated by server"
    )
    
    expires_at: datetime = Field(
        ...,
        description="When this registration session expires"
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "session_id": "unique_session_id",
                "opaque_registration_response": "base64_encoded_opaque_registration_response", 
                "tag_handle": "base64_encoded_32_byte_random_handle",
                "expires_at": "2025-01-20T00:10:00Z"
            }
        }


class SecretTagRegistrationFinishRequest(BaseModel):
    """
    Request schema for finishing secret tag OPAQUE registration.
    
    Client submits OPAQUE registration record to complete registration.
    """
    
    session_id: str = Field(
        ...,
        description="Session ID from registration start response"
    )
    
    opaque_registration_record: str = Field(
        ...,
        description="Base64-encoded OPAQUE registration record from client",
        min_length=1
    )
    
    @field_validator('opaque_registration_record')
    @classmethod
    def validate_registration_record_base64(cls, v):
        """Validate that registration record is base64 or base64url encoded."""
        for decoder in (base64.b64decode, base64.urlsafe_b64decode):
            try:
                # Add correct amount of padding if missing
                missing_padding = len(v) % 4
                if missing_padding:
                    v_padded = v + '=' * (4 - missing_padding)
                else:
                    v_padded = v
                decoded = decoder(v_padded)
                if len(decoded) > 0:
                    return v  # Return original value, not padded
            except Exception:
                continue
        raise ValueError("Invalid base64/base64url encoding for OPAQUE registration record")
    
    class Config:
        json_schema_extra = {
            "example": {
                "session_id": "unique_session_id",
                "opaque_registration_record": "base64_encoded_opaque_registration_record"
            }
        }


class SecretTagRegistrationFinishResponse(BaseModel):
    """
    Response schema for successful secret tag registration.
    
    Returns the tag information and vault details without exposing
    sensitive cryptographic data.
    """
    
    tag_id: str = Field(
        ...,
        description="UUID of the registered secret tag"
    )
    
    tag_handle: str = Field(
        ...,
        description="Base64-encoded tag handle (32 bytes)"
    )
    
    tag_name: str = Field(
        ...,
        description="Human-readable name for the secret tag"
    )
    
    color: Optional[str] = Field(
        None,
        description="Hex color code for UI display"
    )
    
    created_at: datetime = Field(
        ...,
        description="Timestamp when the secret tag was created"
    )
    
    success: bool = Field(
        default=True,
        description="Registration success indicator"
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "tag_id": "12345678-1234-1234-1234-123456789012",
                "tag_handle": "base64_encoded_32_byte_handle",
                "tag_name": "My Secret Tag",
                "color": "#007AFF",
                "created_at": "2025-01-20T00:00:00Z",
                "success": True
            }
        }


# ============================================================================
# Secret Tag Management
# ============================================================================

class SecretTagInfo(BaseModel):
    """
    Schema for secret tag information without sensitive data.
    
    Used for listing user's secret tags. Includes labels based on
    user preferences (show_secret_tag_names).
    """
    
    tag_id: str = Field(
        ...,
        description="UUID of the secret tag"
    )
    
    tag_handle: str = Field(
        ...,
        description="Base64-encoded tag handle (32 bytes) - client-side only identifier"
    )
    
    # Optional metadata (based on user preferences)
    tag_name: Optional[str] = Field(
        None,
        description="Human-readable name (only if user allows showing names)"
    )
    
    color: Optional[str] = Field(
        None,
        description="Hex color code (only if user allows showing names)"
    )
    
    created_at: datetime = Field(
        ...,
        description="When the secret tag was created"
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "tag_id": "12345678-1234-1234-1234-123456789012",
                "tag_handle": "base64_encoded_32_byte_handle",
                "tag_name": "My Secret Tag",
                "color": "#007AFF", 
                "created_at": "2025-01-20T00:00:00Z"
            }
        }


class SecretTagListResponse(BaseModel):
    """Response schema for listing secret tags."""
    
    tags: List[SecretTagInfo] = Field(
        ...,
        description="List of secret tags for the user"
    )
    
    show_labels: bool = Field(
        ...,
        description="Whether tag names and colors are included based on user preference"
    )
    
    total_count: int = Field(
        ...,
        description="Total number of secret tags"
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "tags": [
                    {
                        "tag_id": "12345678-1234-1234-1234-123456789012",
                        "tag_handle": "base64_encoded_handle_1",
                        "tag_name": "My Secret Tag",
                        "color": "#007AFF",
                        "created_at": "2025-01-20T00:00:00Z"
                    }
                ],
                "show_labels": True,
                "total_count": 1
            }
        }


class SecretTagUpdateRequest(BaseModel):
    """Request schema for updating secret tag metadata."""
    
    tag_name: Optional[str] = Field(
        None,
        description="New human-readable name for the secret tag",
        min_length=1,
        max_length=100
    )
    
    color: Optional[str] = Field(
        None,
        description="New hex color code for UI display",
        pattern=r"^#[0-9A-Fa-f]{6}$"
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "tag_name": "Updated Secret Tag Name",
                "color": "#FF0000"
            }
        }


class SecretTagDeleteResponse(BaseModel):
    """Response schema for secret tag deletion."""
    
    tag_id: str = Field(
        ...,
        description="UUID of the deleted secret tag"
    )
    
    deleted_at: datetime = Field(
        ...,
        description="When the secret tag was deleted"
    )
    
    entries_deleted: int = Field(
        ...,
        description="Number of encrypted journal entries that were deleted"
    )
    
    success: bool = Field(
        default=True,
        description="Deletion success indicator"
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "tag_id": "12345678-1234-1234-1234-123456789012",
                "deleted_at": "2025-01-20T00:00:00Z",
                "entries_deleted": 5,
                "success": True
            }
        }


# ============================================================================
# Secret Tag Authentication (Clean OPAQUE)
# ============================================================================

class SecretTagAuthStartRequest(BaseModel):
    """
    Request schema for starting secret tag OPAQUE authentication.
    
    Client submits OPAQUE credential request for the tag.
    """
    
    client_credential_request: str = Field(
        ...,
        description="Base64-encoded OPAQUE client credential request",
        min_length=1
    )
    
    @field_validator('client_credential_request')
    @classmethod
    def validate_credential_request_base64(cls, v):
        """Validate that credential request is base64 or base64url encoded."""
        for decoder in (base64.b64decode, base64.urlsafe_b64decode):
            try:
                # Add correct amount of padding if missing
                missing_padding = len(v) % 4
                if missing_padding:
                    v_padded = v + '=' * (4 - missing_padding)
                else:
                    v_padded = v
                decoded = decoder(v_padded)
                if len(decoded) > 0:
                    return v  # Return original value, not padded
            except Exception:
                continue
        raise ValueError("Invalid base64 encoding for client credential request")
    
    class Config:
        json_schema_extra = {
            "example": {
                "client_credential_request": "base64_encoded_client_credential_request"
            }
        }


class SecretTagAuthStartResponse(BaseModel):
    """
    Response schema for secret tag authentication start.
    
    Contains server's OPAQUE credential response and session information.
    """
    
    session_id: str = Field(
        ...,
        description="Session ID for completing authentication"
    )
    
    server_credential_response: str = Field(
        ...,
        description="Base64-encoded OPAQUE server credential response"
    )
    
    expires_at: datetime = Field(
        ...,
        description="When this authentication session expires"
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "session_id": "unique_session_id",
                "server_credential_response": "base64_encoded_server_credential_response",
                "expires_at": "2025-01-20T00:05:00Z"
            }
        }


class SecretTagAuthFinishRequest(BaseModel):
    """
    Request schema for finishing secret tag OPAQUE authentication.
    
    Client submits final OPAQUE authentication data.
    """
    
    session_id: str = Field(
        ...,
        description="Session ID from authentication start response"
    )
    
    client_credential_finalization: str = Field(
        ...,
        description="Base64-encoded OPAQUE client credential finalization",
        min_length=1
    )
    
    @field_validator('client_credential_finalization')
    @classmethod
    def validate_credential_finalization_base64(cls, v):
        """Validate that credential finalization is base64 or base64url encoded."""
        for decoder in (base64.b64decode, base64.urlsafe_b64decode):
            try:
                # Add correct amount of padding if missing
                missing_padding = len(v) % 4
                if missing_padding:
                    v_padded = v + '=' * (4 - missing_padding)
                else:
                    v_padded = v
                decoded = decoder(v_padded)
                if len(decoded) > 0:
                    return v  # Return original value, not padded
            except Exception:
                continue
        raise ValueError("Invalid base64 encoding for client credential finalization")
    
    class Config:
        json_schema_extra = {
            "example": {
                "session_id": "unique_session_id",
                "client_credential_finalization": "base64_encoded_client_credential_finalization"
            }
        }


class SecretTagAuthFinishResponse(BaseModel):
    """
    Response schema for successful secret tag authentication.
    
    Returns a short-lived tag access token (5 minutes) for accessing
    encrypted journal entries associated with the secret tag.
    """
    
    tag_access_token: str = Field(
        ...,
        description="JWT token for accessing encrypted content (5 minute lifetime)"
    )
    
    tag_id: str = Field(
        ...,
        description="UUID of the authenticated secret tag"
    )
    
    expires_at: datetime = Field(
        ...,
        description="When the tag access token expires"
    )
    
    success: bool = Field(
        default=True,
        description="Authentication success indicator"
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "tag_access_token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...",
                "tag_id": "12345678-1234-1234-1234-123456789012",
                "expires_at": "2025-01-20T00:05:00Z",
                "success": True
            }
        }


# ============================================================================
# Error Response
# ============================================================================

class SecretTagErrorResponse(BaseModel):
    """
    Error response schema for secret tag operations.
    
    Provides error information without leaking sensitive details.
    """
    
    error: str = Field(
        ...,
        description="Error type identifier"
    )
    
    message: str = Field(
        ...,
        description="Human-readable error message"
    )
    
    request_id: Optional[str] = Field(
        None,
        description="Request ID for debugging (optional)"
    )
    
    timestamp: datetime = Field(
        ...,
        description="Error timestamp"
    )
    
    success: bool = Field(
        default=False,
        description="Operation success indicator"
    )
    
    class Config:
        json_schema_extra = {
            "example": {
                "error": "registration_failed",
                "message": "Failed to register secret tag",
                "request_id": "req_12345",
                "timestamp": "2025-01-20T00:00:00Z",
                "success": False
            }
        } 